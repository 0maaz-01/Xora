import clsx from 'clsx';
import { Marker } from './Marker';

// creating a reusable button, href if the button contains link
const Button = ({icon, children, href, containerClassName, onClick, markerFill}) => {

  const Inner = () => (
    <>
        <span className='relative flex items-center min-h-[60px] px-4 g4 rounded-2xl inner-before group-hover:before:opacity-100 overflow-hidden'>
          
          <span className='absolute -left-[1px]'> {/*To set the fixed position, during hovering also*/}
              <Marker markerFill = {markerFill} /> {/*Passing the markerFill as an prop to Marker, the prop is represented by fill in Marker.jsx*/}
          </span>           {/*The text shown on the button*/}

          {icon && (<img src = {icon} alt ="circle" className='size-10 mr-5 object-contain z-10'/>) }  {/*The image shown on the button*/}
          <span className="relative z-2 font-poppins base-bold text-p1 uppercase">{children}</span>       {/*The information displayed on the button*/}
        </span>

        {/*To add animations on the button, so glow before and after are the animations generated by the coder himself in this case js mastery*/}
        <span className='glow-before glow-after'></span>
    </>
  )

  // if it contains link then open that link             initial condition           dynamic condition that comes with the button
  return href ? (<a className = {clsx('relative p-0.5 g5 rounded-2xl shadow-500 group', containerClassName)} 
               href = {href}          // set the href of the button to href passed from the position where the function was called from
                  >
              
              <Inner/>    {/*To display the text that was passed from where this function was called from*/}
              </a>) :
      
  // otherwise return display the button on the screen
  (
    <button className={clsx('relative p-0.5 g5 rounded-2xl shadow-500 group', containerClassName)}
              onClick = {onClick}  // set the onClick function of the button to onClick function passed from the position where the function was called from
               > 
        <Inner/>
    </button>
  )
}

export default Button